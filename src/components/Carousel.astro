---
interface ImageItem {
  path: string;
  alt: string;
  title: string;
}

const { t } = Astro.props;

let images: ImageItem[] = [];

t.carousel.images.forEach((element: any) => {
    images.push({
        path: element.path,
        alt: element.alt,
        title: element.title,
    });
});        
---
<div class="bg-gray-900 w-full flex flex-col items-center py-10" data-aos="zoom-out-up" data-aos-duration="500">
  
  <!-- 1. Header -->
  <div class="text-center mb-10 max-w-4xl w-full px-4">
    <h1 class="text-white title-font mb-4 text-4xl font-extrabold leading-10 tracking-tight sm:text-5xl md:text-6xl">
      {t.carousel.title}
    </h1>
    <div class="flex justify-center mb-4">
      <div class="w-16 h-1 rounded-full bg-accent"></div>
    </div>
    <p class="text-gray-300">{t.carousel.subtitle}</p>
  </div>
  
  <!-- 2. Carrusel + Botones -->
  <div class="relative w-full max-w-4xl aspect-video overflow-hidden">
    <!-- Slides -->
    <div
      id="carousel"
      class="flex h-full transition-transform duration-700 ease-in-out"
    >
      {images.map((image) => (
        <div class="w-full flex-shrink-0 relative transition-all duration-500">
          <img
            src={image.path}
            alt={image.alt}
            class="w-full h-full object-cover rounded-2xl border border-blue-900"
          />
          <h3 class="absolute bottom-6 left-4 text-white bg-black/50 px-3 py-1 rounded-md backdrop-blur-sm">
            {image.title}
          </h3>
        </div>
      ))}
    </div>

    <!-- Prev -->
    <button
      id="prev"
      aria-label="Anterior"
      class="absolute top-1/2 left-4 -translate-y-1/2 bg-blue-800 hover:bg-blue-700 text-white p-2 rounded-full shadow z-20"
    >
      &#10094;
    </button>
    <!-- Next -->
    <button
      id="next"
      aria-label="Siguiente"
      class="absolute top-1/2 right-4 -translate-y-1/2 bg-blue-800 hover:bg-blue-700 text-white p-2 rounded-full shadow z-20"
    >
      &#10095;
    </button>
  </div>  
</div>

<script is:inline type="module">
  document.addEventListener('DOMContentLoaded', () => {
    // 1) Referencias al DOM
    const carousel = document.getElementById('carousel');
    const slides   = carousel.querySelectorAll('div'); // <-- declaramos "slides"
    const nextBtn  = document.getElementById('next');
    const prevBtn  = document.getElementById('prev');

    // 2) Estado
    let currentIndex = 0;
    const total      = slides.length;                // número de slides

    // 3) Función de actualización
    function update() {
      // mover el carrusel
      carousel.style.transform = `translateX(-${currentIndex * 100}%)`;

      // opcional: controlar opacidad y escala
      slides.forEach((slide, i) => {
        if (i === currentIndex) {
          slide.classList.add('opacity-100', 'scale-100');
          slide.classList.remove('opacity-50', 'scale-90');
        } else {
          slide.classList.add('opacity-50', 'scale-90');
          slide.classList.remove('opacity-100', 'scale-100');
        }
      });
    }

    // 4) Event listeners
    nextBtn.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % total;
      update();
    });

    prevBtn.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + total) % total;
      update();
    });

    // 5) Primera llamada para pintar el estado inicial
    update();
  });
</script>